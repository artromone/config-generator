// Code generated by configgen. DO NOT EDIT.
package config

import (
	"fmt"
	"github.com/knadh/koanf/v2"
	"github.com/knadh/koanf/parsers/yaml"
	"github.com/knadh/koanf/providers/env"
	"github.com/knadh/koanf/providers/file"
)

var k = koanf.New(".")

type Config struct {
	Metrics MetricsStruct `koanf:"metrics"`
	Swagger SwaggerStruct `koanf:"swagger"`
	App AppStruct `koanf:"app"`
	Http HttpStruct `koanf:"http"`
	Log LogStruct `koanf:"log"`
	Database DatabaseStruct `koanf:"database"`
	Grpc GrpcStruct `koanf:"grpc"`
	Rmq RmqStruct `koanf:"rmq"`
}


type MetricsStruct struct {
	MetricsEnabled bool `koanf:"enabled" env:"METRICS_ENABLED"`
}

type SwaggerStruct struct {
	SwaggerEnabled bool `koanf:"enabled" env:"SWAGGER_ENABLED"`
}

type AppStruct struct {
	AppName string `koanf:"name" env:"APP_NAME"`
	AppVersion string `koanf:"version" env:"APP_VERSION"`
}

type HttpStruct struct {
	HttpPort string `koanf:"port" env:"HTTP_PORT"`
	HttpUsePreforkMode bool `koanf:"use_prefork_mode" env:"HTTP_USE_PREFORK_MODE"`
}

type LogStruct struct {
	LogLevel string `koanf:"level" env:"LOG_LEVEL"`
}

type DatabaseStruct struct {
	DatabasePoolMax string `koanf:"pool_max" env:"DATABASE_POOL_MAX"`
	DatabaseUrl string `koanf:"url" env:"DATABASE_URL"`
}

type GrpcStruct struct {
	GrpcPort string `koanf:"port" env:"GRPC_PORT"`
}

type RmqStruct struct {
	RmqRpcServer string `koanf:"server_exchange" env:"RMQ_RPC_SERVER"`
	RmqRpcClient string `koanf:"client_exchange" env:"RMQ_RPC_CLIENT"`
	RmqUrl string `koanf:"url" env:"RMQ_URL"`
}


func NewConfig() (*Config, error) {
	// Загружаем конфигурацию из файла
	if err := k.Load(file.Provider("config/config.yaml"), yaml.Parser()); err != nil {
		return nil, fmt.Errorf("error loading config file: %w", err)
	}

	// Переопределяем переменными окружения
	if err := k.Load(env.Provider("", ".", func(s string) string {
		return strings.Replace(strings.ToLower(s), "_", ".", -1)
	}), nil); err != nil {
		return nil, fmt.Errorf("error loading env vars: %w", err)
	}

	var cfg Config
	if err := k.Unmarshal("", &cfg); err != nil {
		return nil, fmt.Errorf("error unmarshaling config: %w", err)
	}

	return &cfg, nil
}

func (c *Config) Validate() error {
	// Добавьте свою валидацию здесь
	return nil
}
