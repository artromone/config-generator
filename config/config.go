// Code generated by configgen. DO NOT EDIT.
package config

import (
	"fmt"
	"strings"
	"github.com/knadh/koanf/v2"
	"github.com/knadh/koanf/parsers/yaml"
	"github.com/knadh/koanf/providers/env"
	"github.com/knadh/koanf/providers/file"
)


type Config struct {
	Game GameStruct `koanf:"game"`
	Web WebStruct `koanf:"web"`
	Database DatabaseStruct `koanf:"database"`
	Notifications NotificationsStruct `koanf:"notifications"`
	Security SecurityStruct `koanf:"security"`
	Cache CacheStruct `koanf:"cache"`
	Auth AuthStruct `koanf:"auth"`
	Features FeaturesStruct `koanf:"features"`
	Monitoring MonitoringStruct `koanf:"monitoring"`
}


type GameStruct struct {
	World GameWorldStruct `koanf:"world"`
	Player GamePlayerStruct `koanf:"player"`
	Name string `koanf:"name" env:"DB_NAME"`
	Version string `koanf:"version"`
	MaxPlayers int `koanf:"max_players"`
	Difficulty string `koanf:"difficulty"`
	PvpEnabled bool `koanf:"pvp_enabled"`
}


type GameWorldStruct struct {
	Size string `koanf:"size" env:"WORLD_SEED"`
	WeatherEnabled bool `koanf:"weather_enabled" env:"WORLD_SEED"`
	DayNightCycle bool `koanf:"day_night_cycle" env:"WORLD_SEED"`
	SpawnPoint GameWorldSpawnPointStruct `koanf:"spawn_point"`
	Name string `koanf:"name" env:"WORLD_SEED"`
	Seed string `koanf:"seed" env:"WORLD_SEED"`
}


type GameWorldSpawnPointStruct struct {
	X int `koanf:"x" env:"WORLD_SEED"`
	Y int `koanf:"y" env:"WORLD_SEED"`
	Z int `koanf:"z" env:"WORLD_SEED"`
}


type GamePlayerStruct struct {
	StarterKit []string `koanf:"starter_kit"`
	StartingHealth int `koanf:"starting_health"`
	StartingMoney string `koanf:"starting_money"`
	MaxInventorySlots int `koanf:"max_inventory_slots"`
	RespawnTime int `koanf:"respawn_time"`
}


type WebStruct struct {
	Port string `koanf:"port" env:"SERVER_PORT"`
	SslEnabled string `koanf:"ssl_enabled"`
	AdminPanel bool `koanf:"admin_panel"`
	Api WebApiStruct `koanf:"api"`
	Host string `koanf:"host" env:"SERVER_HOST"`
}


type WebApiStruct struct {
	CorsEnabled bool `koanf:"cors_enabled"`
	AllowedOrigins []string `koanf:"allowed_origins"`
	RateLimit int `koanf:"rate_limit"`
	Timeout string `koanf:"timeout"`
}


type DatabaseStruct struct {
	Migrations DatabaseMigrationsStruct `koanf:"migrations"`
	Type string `koanf:"type"`
	Connection string `koanf:"connection"`
	Pool DatabasePoolStruct `koanf:"pool"`
}


type DatabaseMigrationsStruct struct {
	BackupBeforeMigrate bool `koanf:"backup_before_migrate"`
	Enabled bool `koanf:"enabled" env:"SSL_ENABLED"`
	AutoMigrate string `koanf:"auto_migrate"`
}


type DatabasePoolStruct struct {
	MaxLifetime string `koanf:"max_lifetime"`
	MaxConnections int `koanf:"max_connections"`
	MinConnections int `koanf:"min_connections"`
	IdleTimeout string `koanf:"idle_timeout"`
}


type NotificationsStruct struct {
	Webhooks NotificationsWebhooksStruct `koanf:"webhooks"`
	Email NotificationsEmailStruct `koanf:"email"`
}


type NotificationsWebhooksStruct struct {
	Discord NotificationsWebhooksDiscordStruct `koanf:"discord"`
}


type NotificationsWebhooksDiscordStruct struct {
	Enabled string `koanf:"enabled" env:"SSL_ENABLED"`
	Url string `koanf:"url" env:"DISCORD_CLIENT_ID"`
	Events []string `koanf:"events" env:"DISCORD_CLIENT_ID"`
}


type NotificationsEmailStruct struct {
	Password string `koanf:"password" env:"DB_PASSWORD"`
	From string `koanf:"from" env:"EMAIL_ENABLED"`
	Enabled string `koanf:"enabled" env:"SSL_ENABLED"`
	SmtpHost string `koanf:"smtp_host" env:"EMAIL_ENABLED"`
	SmtpPort string `koanf:"smtp_port" env:"EMAIL_ENABLED"`
	Username string `koanf:"username" env:"EMAIL_ENABLED"`
}


type SecurityStruct struct {
	RateLimiting SecurityRateLimitingStruct `koanf:"rate_limiting"`
	Anticheat SecurityAnticheatStruct `koanf:"anticheat"`
}


type SecurityRateLimitingStruct struct {
	Enabled bool `koanf:"enabled" env:"SSL_ENABLED"`
	RequestsPerMinute int `koanf:"requests_per_minute"`
	BurstSize int `koanf:"burst_size"`
}


type SecurityAnticheatStruct struct {
	Enabled bool `koanf:"enabled" env:"SSL_ENABLED"`
	StrictMode string `koanf:"strict_mode" env:"ANTICHEAT_STRICT"`
	AutoBan bool `koanf:"auto_ban" env:"ANTICHEAT_STRICT"`
	Checks SecurityAnticheatChecksStruct `koanf:"checks"`
}


type SecurityAnticheatChecksStruct struct {
	ItemDuplication bool `koanf:"item_duplication" env:"ANTICHEAT_STRICT"`
	SpeedHack bool `koanf:"speed_hack" env:"ANTICHEAT_STRICT"`
	FlyHack bool `koanf:"fly_hack" env:"ANTICHEAT_STRICT"`
}


type CacheStruct struct {
	Type string `koanf:"type"`
	Redis CacheRedisStruct `koanf:"redis"`
	Ttl CacheTtlStruct `koanf:"ttl"`
}


type CacheRedisStruct struct {
	Database int `koanf:"database" env:"REDIS_HOST"`
	Host string `koanf:"host" env:"SERVER_HOST"`
	Port string `koanf:"port" env:"SERVER_PORT"`
	Password string `koanf:"password" env:"DB_PASSWORD"`
}


type CacheTtlStruct struct {
	WorldData string `koanf:"world_data"`
	Leaderboards string `koanf:"leaderboards"`
	ShopItems string `koanf:"shop_items"`
	PlayerData string `koanf:"player_data"`
}


type AuthStruct struct {
	Jwt AuthJwtStruct `koanf:"jwt"`
	Session AuthSessionStruct `koanf:"session"`
	Providers AuthProvidersStruct `koanf:"providers"`
}


type AuthJwtStruct struct {
	Secret string `koanf:"secret" env:"GOOGLE_CLIENT_SECRET"`
	ExpiresIn string `koanf:"expires_in" env:"JWT_SECRET"`
	RefreshExpiresIn string `koanf:"refresh_expires_in" env:"JWT_SECRET"`
}


type AuthSessionStruct struct {
	CookieName string `koanf:"cookie_name" env:"SESSION_COOKIE_NAME"`
	Secure string `koanf:"secure" env:"SESSION_COOKIE_NAME"`
	MaxAge int `koanf:"max_age" env:"SESSION_COOKIE_NAME"`
}


type AuthProvidersStruct struct {
	Google AuthProvidersGoogleStruct `koanf:"google"`
	Discord AuthProvidersDiscordStruct `koanf:"discord"`
}


type AuthProvidersGoogleStruct struct {
	ClientId string `koanf:"client_id" env:"GOOGLE_CLIENT_ID"`
	ClientSecret string `koanf:"client_secret" env:"GOOGLE_CLIENT_ID"`
	Enabled bool `koanf:"enabled" env:"SSL_ENABLED"`
}


type AuthProvidersDiscordStruct struct {
	Enabled bool `koanf:"enabled" env:"SSL_ENABLED"`
	ClientId string `koanf:"client_id" env:"DISCORD_CLIENT_ID"`
	ClientSecret string `koanf:"client_secret" env:"DISCORD_CLIENT_ID"`
}


type FeaturesStruct struct {
	Chat FeaturesChatStruct `koanf:"chat"`
	Economy FeaturesEconomyStruct `koanf:"economy"`
	Events FeaturesEventsStruct `koanf:"events"`
}


type FeaturesChatStruct struct {
	Channels []string `koanf:"channels"`
	Enabled bool `koanf:"enabled" env:"SSL_ENABLED"`
	MaxMessageLength int `koanf:"max_message_length"`
	SpamProtection bool `koanf:"spam_protection"`
	BadWordsFilter bool `koanf:"bad_words_filter"`
}


type FeaturesEconomyStruct struct {
	DailyBonus int `koanf:"daily_bonus"`
	Shop FeaturesEconomyShopStruct `koanf:"shop"`
	InflationRate float64 `koanf:"inflation_rate"`
	TaxRate string `koanf:"tax_rate"`
}


type FeaturesEconomyShopStruct struct {
	SeasonalItems bool `koanf:"seasonal_items"`
	RefreshInterval string `koanf:"refresh_interval"`
	DiscountEvents bool `koanf:"discount_events"`
}


type FeaturesEventsStruct struct {
	DoubleXp FeaturesEventsDoubleXpStruct `koanf:"double_xp"`
	BossFights FeaturesEventsBossFightsStruct `koanf:"boss_fights"`
}


type FeaturesEventsDoubleXpStruct struct {
	Enabled bool `koanf:"enabled" env:"SSL_ENABLED"`
	Schedule string `koanf:"schedule"`
	Duration string `koanf:"duration"`
}


type FeaturesEventsBossFightsStruct struct {
	Enabled bool `koanf:"enabled" env:"SSL_ENABLED"`
	MinPlayers int `koanf:"min_players"`
	RewardsMultiplier float64 `koanf:"rewards_multiplier"`
}


type MonitoringStruct struct {
	Metrics MonitoringMetricsStruct `koanf:"metrics"`
	Logging MonitoringLoggingStruct `koanf:"logging"`
}


type MonitoringMetricsStruct struct {
	Endpoint string `koanf:"endpoint"`
	CollectInterval string `koanf:"collect_interval"`
	Collect MonitoringMetricsCollectStruct `koanf:"collect"`
	Enabled bool `koanf:"enabled" env:"SSL_ENABLED"`
}


type MonitoringMetricsCollectStruct struct {
	GameEvents bool `koanf:"game_events"`
	PlayerCount bool `koanf:"player_count"`
	ServerPerformance bool `koanf:"server_performance"`
}


type MonitoringLoggingStruct struct {
	Format string `koanf:"format" env:"FILE_LOGGING"`
	Output string `koanf:"output" env:"FILE_LOGGING"`
	File MonitoringLoggingFileStruct `koanf:"file"`
	Level string `koanf:"level" env:"LOG_LEVEL"`
}


type MonitoringLoggingFileStruct struct {
	MaxAge string `koanf:"max_age" env:"FILE_LOGGING"`
	Enabled string `koanf:"enabled" env:"SSL_ENABLED"`
	Path string `koanf:"path" env:"FILE_LOGGING"`
	MaxSize string `koanf:"max_size" env:"FILE_LOGGING"`
}



func NewConfig() (*Config, error) {
	k := koanf.New(".")
	
	if err := k.Load(file.Provider("config/config.yaml"), yaml.Parser()); err != nil {
		return nil, fmt.Errorf("error loading config file: %w", err)
	}

	if err := k.Load(env.Provider("", ".", func(s string) string {
		return strings.Replace(strings.ToLower(s), "_", ".", -1)
	}), nil); err != nil {
		return nil, fmt.Errorf("error loading env vars: %w", err)
	}

	var cfg Config
	if err := k.Unmarshal("", &cfg); err != nil {
		return nil, fmt.Errorf("error unmarshaling config: %w", err)
	}

	return &cfg, nil
}
